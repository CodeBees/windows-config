#summary 我的win32 输入法编程心得

= 简介 =

Win32下的输入法编程概括地来说就是要写一个DLL. 这个DLL要实现并在.def文件中指定输出M$指定的一些API. Win32在装载你的输入法DLL时会检查是不是每个API都能查询到, 如果不是的话, 这个输入法就不会被成功的装载.

建议下载2600.1106版本的win32 DDK, 里面有区位输入法的源程序, 我的影舞笔就是参考这个程序写的. 可以看看里面的wingb.def文件, 总共输出了将近20个API.

{{{
$cat wingb.def
LIBRARY         WINGB

EXPORTS
                ImeConversionList
                ImeConfigure
                ImeDestroy
                ImeEscape
                ImeInquire
                ImeProcessKey
                ImeSelect
                ImeSetActiveContext
                ImeSetCompositionString
                ImeToAsciiEx
                NotifyIME

                ImeRegisterWord
                ImeUnregisterWord
                ImeGetRegisterWordStyle
                ImeEnumRegisterWord

                UIWndProc
                StatusWndProc
                CompWndProc
                CandWndProc
}}}

事实上win32 DLL还有一个隐含的输出函数, 就是DLL的入口函数, 一般都是名为DllMain的一个函数, 但是在区位输入法里这个函数的名字是ImeDllInit.

下面按照这些API的重要性的顺序对它们逐一说明.

== DllMain ==

这个函数肯定是最重要的, 一个DLL没有这个入口函数的话就不是DLL了. 在DDK里有一个sources的文件, 里面有一行:

{{{
DLLENTRY=ImeDllInit
}}}

你如果用别的build系统, 比如Visual Studio或者mingw, 你就应该自己配置你的入口函数是哪个.

这个函数在dll load的时候需要初始化一些全局的变量, 以及注册win32的几个窗口类. 在区位输入法里注册了四个窗口类, UI, Status, Comp, Cand. 其中UI窗口是一个纯消息窗口, 也是win32 IME必须要求的一个窗口. 这个窗口的类名会在ImeInquire里传给win32 IME以便让win32 IME知道它应该去跟谁通讯.

如果这个函数返回false的话那这个DLL就会load失败, 当前load你的输入法的这个程序就没法用你的输入法了. 所以在这个函数里你可以干一些很&rdquo;酷&rdquo;的事情, 比如, 在测试阶段, 你可以指定只有notepad才能成功load你的输入法, 通过GetModuleFileName你可以得到当前调用的程序的路径, 如果不是notepad, 那就不让它用你的输入法. 然后呢, 你在win32的控制面板&rarr;区域设置里指定你当前正在测试开发的输入法为默认的输入法, 这样你一打开notepad, 就可以开始测试你的输入法了, 而不需要按一下输入法切换键才能开始测. 虽然只是省下按一个键, 但是也是值得的, 因为相信你会按很多次的. 而这时候其他的程序不会受影响, 你可以随便杀死notepad.exe, 做下一轮的开发, 测试迭代.

(win32下一个DLL被load了的话, 是不允许替换这个dll文件的. 所以当你发现一个bug, 做了修正, 你没法把build出来的这个新的dll拷到系统路径里, 必须先把所有的load了这个dll的程序杀死. 如果你的输入法不是默认的, 那你每次都要按一下切换键才能开始测试; 如果它是默认的但是你不把除了notepad的其他程序排除的话, 你每次都要杀死很多程序, 比如explorer.exe等. 尤其是如果你只能手工一个一个的删的话, 很快你会疯掉的. 你甚至都不知道哪个程序load了你的输入法. 只能一个一个的猜? 如果你知道sysinternal的process explorer的话, 那你还可以用一下它的查找功能).

还有一个特别有用的功能是, 即使你的输入法还有bug, 但是如果这个bug只是针对某个程序的话(或者说某个程序有bug, 但只针对你的输入法:-), 你可以把这个程序排除在外. 比如, Cygwin下的X窗口程序都是由xwin.exe来画窗口的, 这些窗口都不能处理win32的输入法, 但是win32的输入法切换键又能把输入法的状态栏给切出来, 很明显没什么意义, 我就把xwin.exe在我的输入法里排除了. 又比如, 所有的DOS窗口的输入法处理都是由一个叫conime.exe的程序处理的, 这个程序好像会对我的输入法提很非分的要求, 我干脆就把它也拒之门外:-) 以后我就打定主意在终端窗口里再也不用输入法了, 呵呵!

做这样的选择, 我的生活会更简单.



== ImeInquire ==

这个函数是
其中, 最后的4个分别是UI消息(伪)窗口, 状态栏窗口, 编辑栏窗口, 和候选词窗口的窗口回调函数. 在我写的影舞笔输入法里, 我把状态栏和候选词的窗口回调函数从.def文件里拿掉了, 也能成功load, 其他的API我试了几个, 拿掉了的话输入法就load不了了.

UI消息窗口之所以称它为伪窗口, 因为这个窗口好像是个纯消息窗口, 没有图形. 它的WM_Paint等消息是从来不会被调用到的.

这里面对一个输入法而言最重要的函数是ImeProcessKey和ImeToAsciiEx. 在输入法激活的状态下, 用户按的每一个键都会导致ImeProcessKey被调用, 如果这是一个本输入法感兴趣的键, 则应该在这个函数里返回真值, 接着win32的输入法管理器就会调用第二个函数, ImeToAsciiEx; 如果不感兴趣的话就返回假值, win32会自己处理这个按键.

在ImeToAsciiEx里你可以做一些操作, 总的来说有以下几种: 

  # 显示/隐藏状态栏
  # 显示/隐藏编辑+候选词窗口
  # 输入当前的候选词
  # ...

但是要注意的是, 大多的操作都不是在这个函数里直接执行的, 而是通过给win32发消息.

其次比较重要的一个函数, 是ImeInquire, 你的输入法有什么&rdquo;能耐&rdquo;, 都是在这里配置的, 比如, 你要不要处理键放开的事件, 要不要处理Alt键, 等等, 在这里告诉win32 IMM.

其次比较重要的函数, 当然就是几个窗口的处理函数了, 你的输入法总得给人家显示候选词的吧:-)

剩下的一些函数基本上不是那么重要, 比如输入法的配置, 是通过ImeConfigure这个API, 在里面应该弹出一个对话框来让用户配置, 这才称得上是&rdquo;用户友好&rdquo;, 我认为纯粹是吃力不讨好的活, 尤其是像咱们这样有点儿hacker精神的人, 什么对话框也比不上给我一个纯文本文件让我自己编辑来得方便. 这样的话我还可以把这个文件放到我自己的svn里面, 到了哪儿我都不需要重新配置我的输入法, 直接svn co就好了. 最烦的是一些把配置全都放到注册表里的程序, 对那些傻瓜用户是友好了, 对我们这样有点技术背景的用户, 真的是很操蛋的一个做法.

还有一些我也没搞明白有什么用, 但是也不能拿掉它, 所以就都留着了.

= IME API =

==  ==
